// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  mailbox: (where?: MailboxWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  mailbox: (where: MailboxWhereUniqueInput) => MailboxNullablePromise;
  mailboxes: (args?: {
    where?: MailboxWhereInput;
    orderBy?: MailboxOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Mailbox>;
  mailboxesConnection: (args?: {
    where?: MailboxWhereInput;
    orderBy?: MailboxOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MailboxConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMailbox: (data: MailboxCreateInput) => MailboxPromise;
  updateMailbox: (args: {
    data: MailboxUpdateInput;
    where: MailboxWhereUniqueInput;
  }) => MailboxPromise;
  updateManyMailboxes: (args: {
    data: MailboxUpdateManyMutationInput;
    where?: MailboxWhereInput;
  }) => BatchPayloadPromise;
  upsertMailbox: (args: {
    where: MailboxWhereUniqueInput;
    create: MailboxCreateInput;
    update: MailboxUpdateInput;
  }) => MailboxPromise;
  deleteMailbox: (where: MailboxWhereUniqueInput) => MailboxPromise;
  deleteManyMailboxes: (where?: MailboxWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  mailbox: (
    where?: MailboxSubscriptionWhereInput
  ) => MailboxSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MailboxOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickname_ASC"
  | "nickname_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MailboxWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MailboxWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  AND?: Maybe<MailboxWhereInput[] | MailboxWhereInput>;
  OR?: Maybe<MailboxWhereInput[] | MailboxWhereInput>;
  NOT?: Maybe<MailboxWhereInput[] | MailboxWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  mailboxes_every?: Maybe<MailboxWhereInput>;
  mailboxes_some?: Maybe<MailboxWhereInput>;
  mailboxes_none?: Maybe<MailboxWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface MailboxCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutMailboxesInput;
  nickname: String;
}

export interface UserCreateOneWithoutMailboxesInput {
  create?: Maybe<UserCreateWithoutMailboxesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMailboxesInput {
  id?: Maybe<ID_Input>;
  alias: String;
  email: String;
  password: String;
}

export interface MailboxUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutMailboxesInput>;
  nickname?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMailboxesInput {
  create?: Maybe<UserCreateWithoutMailboxesInput>;
  update?: Maybe<UserUpdateWithoutMailboxesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMailboxesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMailboxesDataInput {
  alias?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutMailboxesInput {
  update: UserUpdateWithoutMailboxesDataInput;
  create: UserCreateWithoutMailboxesInput;
}

export interface MailboxUpdateManyMutationInput {
  nickname?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  alias: String;
  email: String;
  password: String;
  mailboxes?: Maybe<MailboxCreateManyWithoutOwnerInput>;
}

export interface MailboxCreateManyWithoutOwnerInput {
  create?: Maybe<
    MailboxCreateWithoutOwnerInput[] | MailboxCreateWithoutOwnerInput
  >;
  connect?: Maybe<MailboxWhereUniqueInput[] | MailboxWhereUniqueInput>;
}

export interface MailboxCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  nickname: String;
}

export interface UserUpdateInput {
  alias?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  mailboxes?: Maybe<MailboxUpdateManyWithoutOwnerInput>;
}

export interface MailboxUpdateManyWithoutOwnerInput {
  create?: Maybe<
    MailboxCreateWithoutOwnerInput[] | MailboxCreateWithoutOwnerInput
  >;
  delete?: Maybe<MailboxWhereUniqueInput[] | MailboxWhereUniqueInput>;
  connect?: Maybe<MailboxWhereUniqueInput[] | MailboxWhereUniqueInput>;
  set?: Maybe<MailboxWhereUniqueInput[] | MailboxWhereUniqueInput>;
  disconnect?: Maybe<MailboxWhereUniqueInput[] | MailboxWhereUniqueInput>;
  update?: Maybe<
    | MailboxUpdateWithWhereUniqueWithoutOwnerInput[]
    | MailboxUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | MailboxUpsertWithWhereUniqueWithoutOwnerInput[]
    | MailboxUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<MailboxScalarWhereInput[] | MailboxScalarWhereInput>;
  updateMany?: Maybe<
    | MailboxUpdateManyWithWhereNestedInput[]
    | MailboxUpdateManyWithWhereNestedInput
  >;
}

export interface MailboxUpdateWithWhereUniqueWithoutOwnerInput {
  where: MailboxWhereUniqueInput;
  data: MailboxUpdateWithoutOwnerDataInput;
}

export interface MailboxUpdateWithoutOwnerDataInput {
  nickname?: Maybe<String>;
}

export interface MailboxUpsertWithWhereUniqueWithoutOwnerInput {
  where: MailboxWhereUniqueInput;
  update: MailboxUpdateWithoutOwnerDataInput;
  create: MailboxCreateWithoutOwnerInput;
}

export interface MailboxScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  AND?: Maybe<MailboxScalarWhereInput[] | MailboxScalarWhereInput>;
  OR?: Maybe<MailboxScalarWhereInput[] | MailboxScalarWhereInput>;
  NOT?: Maybe<MailboxScalarWhereInput[] | MailboxScalarWhereInput>;
}

export interface MailboxUpdateManyWithWhereNestedInput {
  where: MailboxScalarWhereInput;
  data: MailboxUpdateManyDataInput;
}

export interface MailboxUpdateManyDataInput {
  nickname?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  alias?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface MailboxSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MailboxWhereInput>;
  AND?: Maybe<MailboxSubscriptionWhereInput[] | MailboxSubscriptionWhereInput>;
  OR?: Maybe<MailboxSubscriptionWhereInput[] | MailboxSubscriptionWhereInput>;
  NOT?: Maybe<MailboxSubscriptionWhereInput[] | MailboxSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Mailbox {
  id: ID_Output;
  nickname: String;
}

export interface MailboxPromise extends Promise<Mailbox>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  nickname: () => Promise<String>;
}

export interface MailboxSubscription
  extends Promise<AsyncIterator<Mailbox>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  nickname: () => Promise<AsyncIterator<String>>;
}

export interface MailboxNullablePromise
  extends Promise<Mailbox | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  nickname: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  alias: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  mailboxes: <T = FragmentableArray<Mailbox>>(args?: {
    where?: MailboxWhereInput;
    orderBy?: MailboxOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  mailboxes: <T = Promise<AsyncIterator<MailboxSubscription>>>(args?: {
    where?: MailboxWhereInput;
    orderBy?: MailboxOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  mailboxes: <T = FragmentableArray<Mailbox>>(args?: {
    where?: MailboxWhereInput;
    orderBy?: MailboxOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MailboxConnection {
  pageInfo: PageInfo;
  edges: MailboxEdge[];
}

export interface MailboxConnectionPromise
  extends Promise<MailboxConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MailboxEdge>>() => T;
  aggregate: <T = AggregateMailboxPromise>() => T;
}

export interface MailboxConnectionSubscription
  extends Promise<AsyncIterator<MailboxConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MailboxEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMailboxSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MailboxEdge {
  node: Mailbox;
  cursor: String;
}

export interface MailboxEdgePromise extends Promise<MailboxEdge>, Fragmentable {
  node: <T = MailboxPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MailboxEdgeSubscription
  extends Promise<AsyncIterator<MailboxEdge>>,
    Fragmentable {
  node: <T = MailboxSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMailbox {
  count: Int;
}

export interface AggregateMailboxPromise
  extends Promise<AggregateMailbox>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMailboxSubscription
  extends Promise<AsyncIterator<AggregateMailbox>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MailboxSubscriptionPayload {
  mutation: MutationType;
  node: Mailbox;
  updatedFields: String[];
  previousValues: MailboxPreviousValues;
}

export interface MailboxSubscriptionPayloadPromise
  extends Promise<MailboxSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MailboxPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MailboxPreviousValuesPromise>() => T;
}

export interface MailboxSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MailboxSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MailboxSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MailboxPreviousValuesSubscription>() => T;
}

export interface MailboxPreviousValues {
  id: ID_Output;
  nickname: String;
}

export interface MailboxPreviousValuesPromise
  extends Promise<MailboxPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
}

export interface MailboxPreviousValuesSubscription
  extends Promise<AsyncIterator<MailboxPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  alias: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Mailbox",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
