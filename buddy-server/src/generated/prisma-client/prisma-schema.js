module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMailbox {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mailbox {
  id: ID!
  owner: User!
  nickname: String!
}

type MailboxConnection {
  pageInfo: PageInfo!
  edges: [MailboxEdge]!
  aggregate: AggregateMailbox!
}

input MailboxCreateInput {
  id: ID
  owner: UserCreateOneWithoutMailboxesInput!
  nickname: String!
}

input MailboxCreateManyWithoutOwnerInput {
  create: [MailboxCreateWithoutOwnerInput!]
  connect: [MailboxWhereUniqueInput!]
}

input MailboxCreateWithoutOwnerInput {
  id: ID
  nickname: String!
}

type MailboxEdge {
  node: Mailbox!
  cursor: String!
}

enum MailboxOrderByInput {
  id_ASC
  id_DESC
  nickname_ASC
  nickname_DESC
}

type MailboxPreviousValues {
  id: ID!
  nickname: String!
}

input MailboxScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  AND: [MailboxScalarWhereInput!]
  OR: [MailboxScalarWhereInput!]
  NOT: [MailboxScalarWhereInput!]
}

type MailboxSubscriptionPayload {
  mutation: MutationType!
  node: Mailbox
  updatedFields: [String!]
  previousValues: MailboxPreviousValues
}

input MailboxSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MailboxWhereInput
  AND: [MailboxSubscriptionWhereInput!]
  OR: [MailboxSubscriptionWhereInput!]
  NOT: [MailboxSubscriptionWhereInput!]
}

input MailboxUpdateInput {
  owner: UserUpdateOneRequiredWithoutMailboxesInput
  nickname: String
}

input MailboxUpdateManyDataInput {
  nickname: String
}

input MailboxUpdateManyMutationInput {
  nickname: String
}

input MailboxUpdateManyWithoutOwnerInput {
  create: [MailboxCreateWithoutOwnerInput!]
  delete: [MailboxWhereUniqueInput!]
  connect: [MailboxWhereUniqueInput!]
  set: [MailboxWhereUniqueInput!]
  disconnect: [MailboxWhereUniqueInput!]
  update: [MailboxUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [MailboxUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [MailboxScalarWhereInput!]
  updateMany: [MailboxUpdateManyWithWhereNestedInput!]
}

input MailboxUpdateManyWithWhereNestedInput {
  where: MailboxScalarWhereInput!
  data: MailboxUpdateManyDataInput!
}

input MailboxUpdateWithoutOwnerDataInput {
  nickname: String
}

input MailboxUpdateWithWhereUniqueWithoutOwnerInput {
  where: MailboxWhereUniqueInput!
  data: MailboxUpdateWithoutOwnerDataInput!
}

input MailboxUpsertWithWhereUniqueWithoutOwnerInput {
  where: MailboxWhereUniqueInput!
  update: MailboxUpdateWithoutOwnerDataInput!
  create: MailboxCreateWithoutOwnerInput!
}

input MailboxWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  AND: [MailboxWhereInput!]
  OR: [MailboxWhereInput!]
  NOT: [MailboxWhereInput!]
}

input MailboxWhereUniqueInput {
  id: ID
}

type Mutation {
  createMailbox(data: MailboxCreateInput!): Mailbox!
  updateMailbox(data: MailboxUpdateInput!, where: MailboxWhereUniqueInput!): Mailbox
  updateManyMailboxes(data: MailboxUpdateManyMutationInput!, where: MailboxWhereInput): BatchPayload!
  upsertMailbox(where: MailboxWhereUniqueInput!, create: MailboxCreateInput!, update: MailboxUpdateInput!): Mailbox!
  deleteMailbox(where: MailboxWhereUniqueInput!): Mailbox
  deleteManyMailboxes(where: MailboxWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  mailbox(where: MailboxWhereUniqueInput!): Mailbox
  mailboxes(where: MailboxWhereInput, orderBy: MailboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mailbox]!
  mailboxesConnection(where: MailboxWhereInput, orderBy: MailboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MailboxConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  mailbox(where: MailboxSubscriptionWhereInput): MailboxSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  alias: String!
  email: String!
  password: String!
  mailboxes(where: MailboxWhereInput, orderBy: MailboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mailbox!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  alias: String!
  email: String!
  password: String!
  mailboxes: MailboxCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutMailboxesInput {
  create: UserCreateWithoutMailboxesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMailboxesInput {
  id: ID
  alias: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  alias: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  alias: String
  email: String
  password: String
  mailboxes: MailboxUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  alias: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutMailboxesInput {
  create: UserCreateWithoutMailboxesInput
  update: UserUpdateWithoutMailboxesDataInput
  upsert: UserUpsertWithoutMailboxesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMailboxesDataInput {
  alias: String
  email: String
  password: String
}

input UserUpsertWithoutMailboxesInput {
  update: UserUpdateWithoutMailboxesDataInput!
  create: UserCreateWithoutMailboxesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  mailboxes_every: MailboxWhereInput
  mailboxes_some: MailboxWhereInput
  mailboxes_none: MailboxWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    